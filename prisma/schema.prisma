// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String                @id @default(cuid())
  externalId       String                @unique
  username         String                @unique
  email            String                @unique
  given_name       String?
  family_name      String?
  profilePicture   String?
  city             String
  preferences      String[]
  challengeTypes   String[]
  completedTasks   CompletedTask[]
  comments         Comment[]
  skipCount        Int                   @default(0)
  lastSkipDate     DateTime?
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  currentChallenge UserCurrentChallenge?
}

model Challenge {
  id              String                 @id @default(cuid())
  title           String
  description     String
  estimatedTime   Int // in minutes
  difficultyLevel Int // 1-5
  place           String
  suitableFor     String[]
  challengeType   String[]
  completedTasks  CompletedTask[]
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  currentForUsers UserCurrentChallenge[]
}

model CompletedTask {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String
  image       String?
  experience  String
  difficulty  Int // 1-5
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  comments    Comment[]
}

model Comment {
  id              String        @id @default(cuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  completedTask   CompletedTask @relation(fields: [completedTaskId], references: [id])
  completedTaskId String
  content         String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model UserCurrentChallenge {
  id          String    @id @default(cuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @unique
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
